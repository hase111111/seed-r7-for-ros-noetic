#!/usr/bin/env python3

from tork_moveit_tutorial import *
import numpy as np
import rospy
import moveit_commander
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from moveit_msgs.msg import RobotTrajectory

move_group_name = 'larm_with_waist'

name_list = ['waist_y_joint',
 'waist_p_joint',
 'waist_r_joint',
 'l_shoulder_p_joint',
 'l_shoulder_r_joint',
 'l_shoulder_y_joint',
 'l_elbow_joint',
 'l_elbow_joint_mimic',
 'l_elbow_middle_joint',
 'l_elbow_middle_joint_mimic',
 'l_wrist_y_joint',
 'l_wrist_p_joint',
 'l_wrist_r_joint',
 'l_wrist_to_hand_connector',
 'l_eef_grasp_joint']

theta_opt = [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000, -0.0024, -0.0091, -0.0213, -0.0401, -0.0657,
  -0.0983, -0.1377, -0.1833, -0.2342, -0.2896, -0.3482, -0.4089, -0.4701,
  -0.5308, -0.5894, -0.6448, -0.6957, -0.7413, -0.7807, -0.8133, -0.8389,
  -0.8577, -0.8699, -0.8766, -0.8790, -0.8790, -0.8790],
 [ 1.5700,  1.5700,  1.5700,  1.5669,  1.5559,  1.5358,  1.5051,  1.4630,
   1.4095,  1.3449,  1.2702,  1.1866,  1.0958,  0.9996,  0.9002,  0.7996,
   0.7002,  0.6040,  0.5132,  0.4296,  0.3549,  0.2903,  0.2368,  0.1947,
   0.1640,  0.1439,  0.1329,  0.1290,  0.1290,  0.1290],
 [ 0.0000,  0.0000,  0.0000, -0.0043, -0.0161, -0.0378, -0.0710, -0.1165,
  -0.1744, -0.2443, -0.3251, -0.4155, -0.5137, -0.6176, -0.7251, -0.8339,
  -0.9414, -1.0453, -1.1435, -1.2339, -1.3147, -1.3846, -1.4425, -1.4880,
  -1.5212, -1.5429, -1.5547, -1.5590, -1.5590, -1.5590],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000, -0.0005, -0.0021, -0.0048, -0.0091, -0.0149,
  -0.0223, -0.0312, -0.0415, -0.0530, -0.0656, -0.0788, -0.0926, -0.1064,
  -0.1202, -0.1334, -0.1460, -0.1575, -0.1678, -0.1767, -0.1841, -0.1899,
  -0.1942, -0.1969, -0.1985, -0.1990, -0.1990, -0.1990]]

theta_opt_move_item = [[ 0.0000,  0.0000,  0.0000, -0.0006, -0.0022, -0.0053, -0.0103, -0.0174,
  -0.0268, -0.0388, -0.0534, -0.0708, -0.0909, -0.1137, -0.1392, -0.1672,
  -0.1977, -0.2303, -0.2651, -0.3016, -0.3397, -0.3792, -0.4196, -0.4608,
  -0.5025, -0.5444, -0.5860, -0.6273, -0.6678, -0.7072, -0.7453, -0.7819,
  -0.8166, -0.8493, -0.8798, -0.9078, -0.9333, -0.9562, -0.9763, -0.9937,
  -1.0083, -1.0203, -1.0298, -1.0369, -1.0419, -1.0450, -1.0466, -1.0472,
  -1.0472, -1.0472],
 [-0.8790, -0.8790, -0.8790, -0.8791, -0.8794, -0.8800, -0.8809, -0.8823,
  -0.8841, -0.8863, -0.8891, -0.8924, -0.8962, -0.9006, -0.9054, -0.9107,
  -0.9165, -0.9227, -0.9293, -0.9363, -0.9436, -0.9511, -0.9588, -0.9667,
  -0.9746, -0.9826, -0.9906, -0.9985, -1.0062, -1.0137, -1.0210, -1.0280,
  -1.0347, -1.0410, -1.0468, -1.0522, -1.0571, -1.0615, -1.0654, -1.0687,
  -1.0715, -1.0738, -1.0756, -1.0770, -1.0780, -1.0786, -1.0789, -1.0790,
  -1.0790, -1.0790],
 [ 0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290],
 [-1.5590, -1.5590, -1.5590, -1.5589, -1.5587, -1.5583, -1.5577, -1.5569,
  -1.5559, -1.5547, -1.5533, -1.5518, -1.5502, -1.5486, -1.5469, -1.5453,
  -1.5437, -1.5422, -1.5407, -1.5395, -1.5384, -1.5375, -1.5368, -1.5363,
  -1.5361, -1.5361, -1.5363, -1.5368, -1.5375, -1.5384, -1.5395, -1.5407,
  -1.5422, -1.5437, -1.5453, -1.5469, -1.5486, -1.5502, -1.5518, -1.5533,
  -1.5547, -1.5559, -1.5569, -1.5577, -1.5583, -1.5587, -1.5589, -1.5590,
  -1.5590, -1.5590],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [-0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990]]


def make_mapping(theta_opt):
    mapping = dict()

    mapping['waist_y_joint'] = theta_opt[0]
    mapping['l_shoulder_p_joint'] = theta_opt[1]
    mapping['l_shoulder_r_joint'] = theta_opt[2]
    mapping['l_shoulder_y_joint'] = theta_opt[3]
    mapping['l_elbow_joint'] = theta_opt[4]
    # 'l_elbow_joint' は mimic joint なので、実際の関節角度は2倍になる
    mapping['l_elbow_joint'] = [2 * x for x in mapping['l_elbow_joint']]
    mapping['l_elbow_joint_dummy'] = theta_opt[5]
    mapping['l_wrist_y_joint'] = theta_opt[6]
    mapping['l_wrist_r_joint'] = theta_opt[7]
    return mapping

def escape_right_arm():
    group = MoveGroupCommander('rarm')
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)
    
    # move to initial position
    name = group.get_active_joints()
    for joint in name:
        group.set_joint_value_target(joint, 0.0)
    group.set_joint_value_target('r_shoulder_r_joint', -np.pi / 3)
    group.go()

    # move to escape position
    group.set_joint_value_target('r_shoulder_r_joint', 0)
    group.go()


def move_initial_position(group, theta_opt):
    mapping = make_mapping(theta_opt)
    for joint in name_list:
        if joint in mapping:
            rospy.loginfo(f"joint = {joint}")
            group.set_joint_value_target(joint, mapping[joint][1])
    group.go()
    

def get_trajectory(theta_opt):
    mapping = make_mapping(theta_opt)
    trajectory = RobotTrajectory()
    trajectory.joint_trajectory.joint_names = name_list
    num_steps = len(theta_opt[0])  # 時間の分割数
    time_step = 0.2  #　各分割の時間
    for i in range(num_steps):
        point = JointTrajectoryPoint()

        # 各時間における関節角度を取得     
        joint_positions = []
        for joint in name_list:
            if joint in mapping:
                joint_positions.append(mapping[joint][i])  # mappingにデータがあればその値を追加
            else:
                joint_positions.append(0.0)  # mappingにデータがなければ0を追加

        # 関節角度を設定
        point.positions = joint_positions

        # 時間を設定
        point.time_from_start = rospy.Duration(time_step * (i + 1))

        # ポイントを追加
        trajectory.joint_trajectory.points.append(point)

    return trajectory

def main():
    group = MoveGroupCommander(move_group_name)
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)

    move_initial_position(group, theta_opt)
    
    trajectory = get_trajectory(theta_opt)
    group.execute(trajectory, wait=True)

    trajectory = get_trajectory(theta_opt_move_item)
    group.execute(trajectory, wait=True)
    


if __name__ == '__main__':
    
    init_node()

    escape_right_arm()

    main()