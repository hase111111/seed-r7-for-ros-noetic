#!/usr/bin/env python3

from tork_moveit_tutorial import *
import numpy as np
import rospy
import moveit_commander
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from moveit_msgs.msg import RobotTrajectory

move_group_name = 'larm_with_waist'

name_list = ['waist_y_joint',
 'waist_p_joint',
 'waist_r_joint',
 'l_shoulder_p_joint',
 'l_shoulder_r_joint',
 'l_shoulder_y_joint',
 'l_elbow_joint',
 'l_elbow_joint_mimic',
 'l_elbow_middle_joint',
 'l_elbow_middle_joint_mimic',
 'l_wrist_y_joint',
 'l_wrist_p_joint',
 'l_wrist_r_joint',
 'l_wrist_to_hand_connector',
 'l_eef_grasp_joint']

theta_opt = [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000, -0.0024, -0.0091, -0.0213, -0.0401, -0.0657,
  -0.0983, -0.1377, -0.1833, -0.2342, -0.2896, -0.3482, -0.4089, -0.4701,
  -0.5308, -0.5894, -0.6448, -0.6957, -0.7413, -0.7807, -0.8133, -0.8389,
  -0.8577, -0.8699, -0.8766, -0.8790, -0.8790, -0.8790],
 [ 1.5700,  1.5700,  1.5700,  1.5669,  1.5559,  1.5358,  1.5051,  1.4630,
   1.4095,  1.3449,  1.2702,  1.1866,  1.0958,  0.9996,  0.9002,  0.7996,
   0.7002,  0.6040,  0.5132,  0.4296,  0.3549,  0.2903,  0.2368,  0.1947,
   0.1640,  0.1439,  0.1329,  0.1290,  0.1290,  0.1290],
 [ 0.0000,  0.0000,  0.0000, -0.0043, -0.0161, -0.0378, -0.0710, -0.1165,
  -0.1744, -0.2443, -0.3251, -0.4155, -0.5137, -0.6176, -0.7251, -0.8339,
  -0.9414, -1.0453, -1.1435, -1.2339, -1.3147, -1.3846, -1.4425, -1.4880,
  -1.5212, -1.5429, -1.5547, -1.5590, -1.5590, -1.5590],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000, -0.0005, -0.0021, -0.0048, -0.0091, -0.0149,
  -0.0223, -0.0312, -0.0415, -0.0530, -0.0656, -0.0788, -0.0926, -0.1064,
  -0.1202, -0.1334, -0.1460, -0.1575, -0.1678, -0.1767, -0.1841, -0.1899,
  -0.1942, -0.1969, -0.1985, -0.1990, -0.1990, -0.1990]]

theta_opt_move_item = [[ 0.0000,  0.0000,  0.0000, -0.0005, -0.0019, -0.0046, -0.0088, -0.0149,
  -0.0230, -0.0333, -0.0458, -0.0607, -0.0779, -0.0975, -0.1193, -0.1433,
  -0.1694, -0.1974, -0.2272, -0.2585, -0.2912, -0.3250, -0.3597, -0.3950,
  -0.4307, -0.4666, -0.5023, -0.5377, -0.5724, -0.6062, -0.6389, -0.6702,
  -0.7000, -0.7280, -0.7541, -0.7781, -0.8000, -0.8196, -0.8368, -0.8517,
  -0.8643, -0.8746, -0.8827, -0.8888, -0.8930, -0.8957, -0.8971, -0.8976,
  -0.8976, -0.8976],
 [-0.8790, -0.8790, -0.8790, -0.8791, -0.8792, -0.8795, -0.8800, -0.8806,
  -0.8815, -0.8826, -0.8840, -0.8857, -0.8876, -0.8897, -0.8921, -0.8948,
  -0.8977, -0.9008, -0.9041, -0.9075, -0.9112, -0.9149, -0.9188, -0.9227,
  -0.9267, -0.9307, -0.9346, -0.9386, -0.9425, -0.9462, -0.9499, -0.9534,
  -0.9567, -0.9599, -0.9628, -0.9655, -0.9680, -0.9702, -0.9721, -0.9738,
  -0.9752, -0.9764, -0.9773, -0.9780, -0.9785, -0.9788, -0.9789, -0.9790,
  -0.9790, -0.9790],
 [ 0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290],
 [-1.5590, -1.5590, -1.5590, -1.5589, -1.5587, -1.5583, -1.5577, -1.5569,
  -1.5558, -1.5546, -1.5533, -1.5518, -1.5502, -1.5485, -1.5468, -1.5451,
  -1.5435, -1.5419, -1.5405, -1.5392, -1.5381, -1.5372, -1.5365, -1.5360,
  -1.5358, -1.5358, -1.5360, -1.5365, -1.5372, -1.5381, -1.5392, -1.5405,
  -1.5419, -1.5435, -1.5451, -1.5468, -1.5485, -1.5502, -1.5518, -1.5533,
  -1.5546, -1.5558, -1.5569, -1.5577, -1.5583, -1.5587, -1.5589, -1.5590,
  -1.5590, -1.5590],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [-0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990, -0.1990,
  -0.1990, -0.1990]]


def make_mapping(theta_opt):
    mapping = dict()

    mapping['waist_y_joint'] = theta_opt[0]
    mapping['l_shoulder_p_joint'] = theta_opt[1]
    mapping['l_shoulder_r_joint'] = theta_opt[2]
    mapping['l_shoulder_y_joint'] = theta_opt[3]
    mapping['l_elbow_joint'] = theta_opt[4]
    # 'l_elbow_joint' は mimic joint なので、実際の関節角度は2倍になる
    mapping['l_elbow_joint'] = [2 * x for x in mapping['l_elbow_joint']]
    mapping['l_elbow_joint_dummy'] = theta_opt[5]
    mapping['l_wrist_y_joint'] = theta_opt[6]
    mapping['l_wrist_r_joint'] = theta_opt[7]
    return mapping

def escape_right_arm():
    group = MoveGroupCommander('rarm')
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)
    
    # move to initial position
    name = group.get_active_joints()
    for joint in name:
        group.set_joint_value_target(joint, 0.0)
    group.set_joint_value_target('r_shoulder_r_joint', -np.pi / 3)
    group.go()

    # move to escape position
    group.set_joint_value_target('r_shoulder_r_joint', 0)
    group.go()


def move_initial_position(group, theta_opt):
    mapping = make_mapping(theta_opt)
    for joint in name_list:
        if joint in mapping:
            rospy.loginfo(f"joint = {joint}")
            group.set_joint_value_target(joint, mapping[joint][1])
    group.go()
    

def get_trajectory(theta_opt):
    mapping = make_mapping(theta_opt)
    trajectory = RobotTrajectory()
    trajectory.joint_trajectory.joint_names = name_list
    num_steps = len(theta_opt[0])  # 時間の分割数
    time_step = 0.2  #　各分割の時間
    for i in range(num_steps):
        point = JointTrajectoryPoint()

        # 各時間における関節角度を取得     
        joint_positions = []
        for joint in name_list:
            if joint in mapping:
                joint_positions.append(mapping[joint][i])  # mappingにデータがあればその値を追加
            else:
                joint_positions.append(0.0)  # mappingにデータがなければ0を追加

        # 関節角度を設定
        point.positions = joint_positions

        # 時間を設定
        point.time_from_start = rospy.Duration(time_step * (i + 1))

        # ポイントを追加
        trajectory.joint_trajectory.points.append(point)

    return trajectory

def main():
    group = MoveGroupCommander(move_group_name)
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)

    move_initial_position(group, theta_opt)
    
    trajectory = get_trajectory(theta_opt)
    group.execute(trajectory, wait=True)

    trajectory = get_trajectory(theta_opt_move_item)
    group.execute(trajectory, wait=True)
    


if __name__ == '__main__':
    
    init_node()

    escape_right_arm()

    main()