#!/usr/bin/env python3

from tork_moveit_tutorial import *


move_group_name = 'larm_with_waist'

name_list = ['waist_y_joint',
 'waist_p_joint',
 'waist_r_joint',
 'l_shoulder_p_joint',
 'l_shoulder_r_joint',
 'l_shoulder_y_joint',
 'l_elbow_joint',
 'l_elbow_joint_mimic',
 'l_elbow_middle_joint',
 'l_elbow_middle_joint_mimic',
 'l_wrist_y_joint',
 'l_wrist_p_joint',
 'l_wrist_r_joint',
 'l_wrist_to_hand_connector',
 'l_eef_grasp_joint']

theta_opt = [[-5.66285033e-29, -5.50107222e-29, -5.34165082e-29,  6.33682687e-09,
   2.26559844e-08,  5.03289164e-08,  8.88693209e-08,  1.36346073e-07,
   1.89788599e-07,  2.45578859e-07,  2.99822641e-07,  3.48691733e-07,
   3.88727957e-07,  4.17099974e-07,  4.31804450e-07,  4.31804450e-07,
   4.17099974e-07,  3.88727957e-07,  3.48691733e-07,  2.99822641e-07,
   2.45578859e-07,  1.89788599e-07,  1.36346073e-07,  8.88693209e-08,
   5.03289164e-08,  2.26559844e-08,  6.33682687e-09, -1.08333559e-33,
  -8.47409176e-33, -1.84889275e-32],
 [-3.94430453e-29, -5.26564654e-29, -6.58134558e-29, -2.39457833e-03,
  -9.02572873e-03, -2.12270655e-02, -3.98680288e-02, -6.53980896e-02,
  -9.78909551e-02, -1.37088774e-01, -1.82446342e-01, -2.33175306e-01,
  -2.88288374e-01, -3.46643517e-01, -4.06988177e-01, -4.68003475e-01,
  -5.28348417e-01, -5.86704105e-01, -6.41817943e-01, -6.92547848e-01,
  -7.37906461e-01, -7.77105357e-01, -8.09599257e-01, -8.35130239e-01,
  -8.53771951e-01, -8.65973828e-01, -8.72605297e-01, -8.75000000e-01,
  -8.75000000e-01, -8.75000000e-01],
 [-1.72563323e-29, -1.51732465e-29, -1.30685902e-29,  1.26709513e-03,
   4.77597556e-03,  1.12323187e-02,  2.10961812e-02,  3.46053914e-02,
   5.17989412e-02,  7.25403785e-02,  9.65411990e-02,  1.23384239e-01,
   1.52547067e-01,  1.83425377e-01,  2.15356379e-01,  2.47642193e-01,
   2.79573243e-01,  3.10451644e-01,  3.39614602e-01,  3.66457801e-01,
   3.90458800e-01,  4.11200421e-01,  4.28394148e-01,  4.41903517e-01,
   4.51767509e-01,  4.58223946e-01,  4.61732883e-01,  4.63000000e-01,
   4.63000000e-01,  4.63000000e-01],
 [-1.33711923e-28, -1.31770586e-28, -1.29829181e-28, -1.65842095e-03,
  -6.25097779e-03, -1.47012949e-02, -2.76115214e-02, -4.52929472e-02,
  -6.77966177e-02, -9.49439501e-02, -1.26357348e-01, -1.61490820e-01,
  -1.99660590e-01, -2.40075721e-01, -2.81868724e-01, -3.24126180e-01,
  -3.65919355e-01, -4.06334818e-01, -4.44505058e-01, -4.79639104e-01,
  -5.11053140e-01, -5.38201130e-01, -5.60705432e-01, -5.78387420e-01,
  -5.91298104e-01, -5.99748751e-01, -6.04341503e-01, -6.06000000e-01,
  -6.06000000e-01, -6.06000000e-01],
 [-1.06496222e-28, -9.21981183e-29, -7.78948144e-29, -7.17005499e-04,
  -2.70256234e-03, -6.35599299e-03, -1.19376328e-02, -1.95820662e-02,
  -2.93113634e-02, -4.10483159e-02, -5.46296739e-02, -6.98193818e-02,
  -8.63218154e-02, -1.03795018e-01, -1.21863938e-01, -1.40133664e-01,
  -1.58202665e-01, -1.75676024e-01, -1.92178679e-01, -2.07368657e-01,
  -2.20950315e-01, -2.32687577e-01, -2.42417171e-01, -2.50061869e-01,
  -2.55643724e-01, -2.59297310e-01, -2.61282959e-01, -2.62000000e-01,
  -2.62000000e-01, -2.62000000e-01],
 [-1.06496222e-28, -9.21981183e-29, -7.78948144e-29, -7.17005499e-04,
  -2.70256234e-03, -6.35599299e-03, -1.19376328e-02, -1.95820662e-02,
  -2.93113634e-02, -4.10483159e-02, -5.46296739e-02, -6.98193818e-02,
  -8.63218154e-02, -1.03795018e-01, -1.21863938e-01, -1.40133664e-01,
  -1.58202665e-01, -1.75676024e-01, -1.92178679e-01, -2.07368657e-01,
  -2.20950315e-01, -2.32687577e-01, -2.42417171e-01, -2.50061869e-01,
  -2.55643724e-01, -2.59297310e-01, -2.61282959e-01, -2.62000000e-01,
  -2.62000000e-01, -2.62000000e-01],
 [ 1.25231669e-29,  9.91006512e-30,  7.26306701e-30, -1.86640687e-03,
  -7.03492564e-03, -1.65450145e-02, -3.10743398e-02, -5.09732311e-02,
  -7.62991361e-02, -1.06851076e-01, -1.42204099e-01, -1.81743741e-01,
  -2.24700472e-01, -2.70184161e-01, -3.17218528e-01, -3.64775598e-01,
  -4.11810163e-01, -4.57294235e-01, -5.00251508e-01, -5.39791811e-01,
  -5.75145570e-01, -6.05698268e-01, -6.31024901e-01, -6.50924440e-01,
  -6.65454293e-01, -6.74964762e-01, -6.80133505e-01, -6.82000000e-01,
  -6.82000000e-01, -6.82000000e-01],
 [-2.19894977e-28, -2.48663748e-28, -2.76982622e-28, -3.64244701e-03,
  -1.37292472e-02, -3.22890055e-02, -6.06442657e-02, -9.94787496e-02,
  -1.48904597e-01, -2.08529608e-01, -2.77524477e-01, -3.54690041e-01,
  -4.38524516e-01, -5.27290739e-01, -6.19083413e-01, -7.11896348e-01,
  -8.03689707e-01, -8.92457253e-01, -9.76293596e-01, -1.05346144e+00,
  -1.12245885e+00, -1.18208647e+00, -1.23151483e+00, -1.27035154e+00,
  -1.29870862e+00, -1.31726968e+00, -1.32735725e+00, -1.33100000e+00,
  -1.33100000e+00, -1.33100000e+00]]

data_num = len(theta_opt[0])

mapping = dict()
mapping['waist_y_joint'] = theta_opt[0]
mapping['l_shoulder_p_joint'] = theta_opt[1]
mapping['l_shoulder_r_joint'] = theta_opt[2]
mapping['l_shoulder_y_joint'] = theta_opt[3]
mapping['l_elbow_joint'] = theta_opt[4]
# 'l_elbow_joint'の値をすべて2倍する
mapping['l_elbow_joint'] = [2 * x for x in mapping['l_elbow_joint']]
mapping['l_elbow_joint_dummy'] = theta_opt[5]
mapping['l_wrist_y_joint'] = theta_opt[6]
# 'l_wrist_y_joint'の値をすべて-1倍する
mapping['l_wrist_y_joint'] = [-1 * x for x in mapping['l_wrist_y_joint']]
mapping['l_wrist_r_joint'] = theta_opt[7]

def main():
    group = MoveGroupCommander(move_group_name)
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)

    for i in range(data_num):
        # すべてのjointについて，mappingにデータがあるか確認し，あればその値を設定する
        for name in name_list:
            if name in mapping:
                group.set_joint_value_target(name, mapping[name][i])
                rospy.loginfo(f"Set Target to {name}: {mapping[name][i]}")

        wait = True if i == 1 else False
        group.go(wait=wait)
        rospy.sleep(0.5)


if __name__ == '__main__':
    
    init_node()

    main()
    
    # group = MoveGroupCommander(move_group_name)
    
    # # Pose Target 1
    # rospy.loginfo( "Start Pose Target 1")
    # pose_target_1 = Pose()
    
    # pose_target_1.position.x = 0.0
    # pose_target_1.position.y = -0.6
    # pose_target_1.position.z = 0.3
    # pose_target_1.orientation.x = 1.0
    # pose_target_1.orientation.y = 0.0
    # pose_target_1.orientation.z = 0.0
    # pose_target_1.orientation.w = 0.0
    
    # rospy.loginfo( "Set Target to Pose:\n{}".format( pose_target_1 ) )
    # group.set_pose_target( pose_target_1 )
    # group.go()
    
    # # Pose Target 2
    # rospy.loginfo( "Start Pose Target 2")
    # pose_target_2 = Pose()
    
    # pose_target_2.position.x = 0.6
    # pose_target_2.position.y = 0.0
    # pose_target_2.position.z = 0.3
    # pose_target_2.orientation.x = -0.707
    # pose_target_2.orientation.y = -0.707
    
    # rospy.loginfo( "Set Target to Pose:\n{}".format( pose_target_2 ) )
    # group.set_pose_target( pose_target_2 )
    # group.go()
    
    
