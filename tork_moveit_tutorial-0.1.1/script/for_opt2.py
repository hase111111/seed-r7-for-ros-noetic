#!/usr/bin/env python3

from tork_moveit_tutorial import *
import numpy as np
import rospy
import moveit_commander
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from moveit_msgs.msg import RobotTrajectory

##-- for hand control
from seed_r7_ros_controller.srv import*

move_group_name = 'larm_with_waist'

name_list = ['waist_y_joint',
 'waist_p_joint',
 'waist_r_joint',
 'l_shoulder_p_joint',
 'l_shoulder_r_joint',
 'l_shoulder_y_joint',
 'l_elbow_joint',
 'l_elbow_joint_mimic',
 'l_elbow_middle_joint',
 'l_elbow_middle_joint_mimic',
 'l_wrist_y_joint',
 'l_wrist_p_joint',
 'l_wrist_r_joint',
 'l_wrist_to_hand_connector',
 'l_eef_grasp_joint']

theta_opt = [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000, -0.0024, -0.0091, -0.0213, -0.0401, -0.0657,
  -0.0983, -0.1377, -0.1833, -0.2342, -0.2896, -0.3482, -0.4089, -0.4701,
  -0.5308, -0.5894, -0.6448, -0.6957, -0.7413, -0.7807, -0.8133, -0.8389,
  -0.8577, -0.8699, -0.8766, -0.8790, -0.8790, -0.8790],
 [ 1.5700,  1.5700,  1.5700,  1.5669,  1.5559,  1.5358,  1.5051,  1.4630,
   1.4095,  1.3449,  1.2702,  1.1866,  1.0958,  0.9996,  0.9002,  0.7996,
   0.7002,  0.6040,  0.5132,  0.4296,  0.3549,  0.2903,  0.2368,  0.1947,
   0.1640,  0.1439,  0.1329,  0.1290,  0.1290,  0.1290],
 [ 0.0000,  0.0000,  0.0000, -0.0043, -0.0161, -0.0378, -0.0710, -0.1165,
  -0.1744, -0.2443, -0.3251, -0.4155, -0.5137, -0.6176, -0.7251, -0.8339,
  -0.9414, -1.0453, -1.1435, -1.2339, -1.3147, -1.3846, -1.4425, -1.4880,
  -1.5212, -1.5429, -1.5547, -1.5590, -1.5590, -1.5590],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
 [ 0.0000,  0.0000,  0.0000, -0.0005, -0.0021, -0.0048, -0.0091, -0.0149,
  -0.0223, -0.0312, -0.0415, -0.0530, -0.0656, -0.0788, -0.0926, -0.1064,
  -0.1202, -0.1334, -0.1460, -0.1575, -0.1678, -0.1767, -0.1841, -0.1899,
  -0.1942, -0.1969, -0.1985, -0.1990, -0.1990, -0.1990]]

theta_opt_move_item = [[ 0.0000,  0.0000,  0.0000,  0.0018,  0.0068,  0.0160,  0.0299,  0.0487,
   0.0723,  0.1003,  0.1322,  0.1670,  0.2038,  0.2414,  0.2785,  0.3138,
   0.3461,  0.3738,  0.3957,  0.4106,  0.4173,  0.4148,  0.4023,  0.3792,
   0.3451,  0.3000,  0.2441,  0.1780,  0.1027,  0.0193, -0.0709, -0.1662,
  -0.2649, -0.3654, -0.4657, -0.5642, -0.6590, -0.7485, -0.8314, -0.9062,
  -0.9720, -1.0280, -1.0737, -1.1092, -1.1349, -1.1514, -1.1604, -1.1636,
  -1.1636, -1.1636],
 [-0.8790, -0.8790, -0.8790, -0.8765, -0.8695, -0.8566, -0.8368, -0.8096,
  -0.7749, -0.7328, -0.6841, -0.6293, -0.5697, -0.5064, -0.4408, -0.3745,
  -0.3090, -0.2460, -0.1870, -0.1335, -0.0871, -0.0491, -0.0205, -0.0024,
   0.0045,  0.0000, -0.0161, -0.0434, -0.0813, -0.1289, -0.1849, -0.2479,
  -0.3165, -0.3890, -0.4637, -0.5389, -0.6128, -0.6840, -0.7508, -0.8121,
  -0.8665, -0.9133, -0.9520, -0.9822, -1.0041, -1.0185, -1.0262, -1.0290,
  -1.0290, -1.0290],
 [ 0.1290,  0.1290,  0.1290,  0.1286,  0.1277,  0.1259,  0.1231,  0.1193,
   0.1144,  0.1085,  0.1017,  0.0940,  0.0855,  0.0766,  0.0672,  0.0578,
   0.0484,  0.0392,  0.0306,  0.0227,  0.0157,  0.0098,  0.0052,  0.0019,
   0.0002,  0.0000,  0.0014,  0.0043,  0.0086,  0.0142,  0.0210,  0.0288,
   0.0374,  0.0465,  0.0560,  0.0656,  0.0751,  0.0843,  0.0929,  0.1008,
   0.1078,  0.1139,  0.1190,  0.1229,  0.1258,  0.1276,  0.1286,  0.1290,
   0.1290,  0.1290],
 [-1.5590, -1.5590, -1.5590, -1.5548, -1.5430, -1.5212, -1.4878, -1.4419,
  -1.3831, -1.3118, -1.2289, -1.1357, -1.0339, -0.9254, -0.8127, -0.6981,
  -0.5844, -0.4740, -0.3698, -0.2742, -0.1897, -0.1185, -0.0626, -0.0235,
  -0.0024,  0.0000, -0.0165, -0.0514, -0.1037, -0.1719, -0.2542, -0.3484,
  -0.4521, -0.5626, -0.6771, -0.7931, -0.9076, -1.0182, -1.1224, -1.2181,
  -1.3033, -1.3768, -1.4375, -1.4851, -1.5197, -1.5423, -1.5546, -1.5590,
  -1.5590, -1.5590],
 [ 0.0000,  0.0000,  0.0000, -0.0027, -0.0101, -0.0238, -0.0449, -0.0740,
  -0.1112, -0.1563, -0.2088, -0.2678, -0.3324, -0.4013, -0.4729, -0.5458,
  -0.6184, -0.6889, -0.7556, -0.8171, -0.8717, -0.9181, -0.9549, -0.9813,
  -0.9965, -1.0000, -0.9917, -0.9719, -0.9411, -0.9004, -0.8507, -0.7936,
  -0.7305, -0.6631, -0.5930, -0.5219, -0.4515, -0.3835, -0.3194, -0.2604,
  -0.2079, -0.1625, -0.1250, -0.0957, -0.0743, -0.0603, -0.0527, -0.0500,
  -0.0500, -0.0500],
 [ 0.0000,  0.0000,  0.0000, -0.0027, -0.0101, -0.0238, -0.0449, -0.0740,
  -0.1112, -0.1563, -0.2088, -0.2678, -0.3324, -0.4013, -0.4729, -0.5458,
  -0.6184, -0.6889, -0.7556, -0.8171, -0.8717, -0.9181, -0.9549, -0.9813,
  -0.9965, -1.0000, -0.9917, -0.9719, -0.9411, -0.9004, -0.8507, -0.7936,
  -0.7305, -0.6631, -0.5930, -0.5219, -0.4515, -0.3835, -0.3194, -0.2604,
  -0.2079, -0.1625, -0.1250, -0.0957, -0.0743, -0.0603, -0.0527, -0.0500,
  -0.0500, -0.0500],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [-0.1990, -0.1990, -0.1990, -0.1981, -0.1957, -0.1912, -0.1843, -0.1750,
  -0.1633, -0.1493, -0.1332, -0.1155, -0.0966, -0.0770, -0.0573, -0.0380,
  -0.0200, -0.0036,  0.0103,  0.0213,  0.0288,  0.0323,  0.0314,  0.0258,
   0.0154,  0.0000, -0.0203, -0.0452, -0.0744, -0.1073, -0.1434, -0.1820,
  -0.2224, -0.2638, -0.3054, -0.3465, -0.3862, -0.4238, -0.4588, -0.4904,
  -0.5183, -0.5421, -0.5616, -0.5768, -0.5877, -0.5948, -0.5986, -0.6000,
  -0.6000, -0.6000]]

theta_opt_set_item = [[-1.1636, -1.1636, -1.1636, -1.1636, -1.1636, -1.1635, -1.1635, -1.1635,
  -1.1635, -1.1635, -1.1635, -1.1635, -1.1635, -1.1635, -1.1634, -1.1634,
  -1.1634, -1.1634, -1.1634, -1.1634, -1.1634, -1.1633, -1.1633, -1.1633,
  -1.1633, -1.1633, -1.1633, -1.1633, -1.1633, -1.1634, -1.1634, -1.1634,
  -1.1634, -1.1634, -1.1634, -1.1634, -1.1635, -1.1635, -1.1635, -1.1635,
  -1.1635, -1.1635, -1.1635, -1.1635, -1.1635, -1.1636, -1.1636, -1.1636,
  -1.1636, -1.1636],
 [-1.0290, -1.0290, -1.0290, -1.0290, -1.0288, -1.0286, -1.0282, -1.0277,
  -1.0270, -1.0260, -1.0249, -1.0236, -1.0221, -1.0204, -1.0184, -1.0163,
  -1.0140, -1.0115, -1.0089, -1.0061, -1.0032, -1.0003, -0.9972, -0.9941,
  -0.9909, -0.9878, -0.9846, -0.9815, -0.9785, -0.9755, -0.9726, -0.9699,
  -0.9673, -0.9648, -0.9625, -0.9604, -0.9585, -0.9568, -0.9553, -0.9540,
  -0.9529, -0.9520, -0.9513, -0.9508, -0.9504, -0.9502, -0.9500, -0.9500,
  -0.9500, -0.9500],
 [ 0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,  0.1290,
   0.1290,  0.1290],
 [-1.5590, -1.5590, -1.5590, -1.5589, -1.5588, -1.5585, -1.5580, -1.5574,
  -1.5566, -1.5556, -1.5546, -1.5534, -1.5522, -1.5509, -1.5496, -1.5483,
  -1.5470, -1.5458, -1.5447, -1.5438, -1.5429, -1.5422, -1.5416, -1.5413,
  -1.5411, -1.5411, -1.5413, -1.5416, -1.5422, -1.5429, -1.5438, -1.5447,
  -1.5458, -1.5470, -1.5483, -1.5496, -1.5509, -1.5522, -1.5534, -1.5546,
  -1.5556, -1.5566, -1.5574, -1.5580, -1.5585, -1.5588, -1.5589, -1.5590,
  -1.5590, -1.5590],
 [-0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500],
 [-0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500, -0.0500,
  -0.0500, -0.0500],
 [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
   0.0000,  0.0000],
 [-0.3000, -0.3000, -0.3000, -0.2999, -0.2998, -0.2995, -0.2990, -0.2983,
  -0.2974, -0.2963, -0.2949, -0.2932, -0.2913, -0.2891, -0.2867, -0.2840,
  -0.2811, -0.2780, -0.2747, -0.2712, -0.2675, -0.2638, -0.2599, -0.2560,
  -0.2520, -0.2480, -0.2440, -0.2401, -0.2362, -0.2324, -0.2288, -0.2253,
  -0.2220, -0.2189, -0.2160, -0.2133, -0.2109, -0.2087, -0.2068, -0.2051,
  -0.2037, -0.2026, -0.2017, -0.2010, -0.2005, -0.2002, -0.2001, -0.2000,
  -0.2000, -0.2000]]

def make_mapping(theta_opt):
    mapping = dict()

    mapping['waist_y_joint'] = theta_opt[0]
    mapping['l_shoulder_p_joint'] = theta_opt[1]
    mapping['l_shoulder_r_joint'] = theta_opt[2]
    mapping['l_shoulder_y_joint'] = theta_opt[3]
    mapping['l_elbow_joint'] = theta_opt[4]
    # 'l_elbow_joint' は mimic joint なので、実際の関節角度は2倍になる
    mapping['l_elbow_joint'] = [2 * x for x in mapping['l_elbow_joint']]
    mapping['l_elbow_joint_dummy'] = theta_opt[5]
    mapping['l_wrist_y_joint'] = theta_opt[6]
    mapping['l_wrist_r_joint'] = theta_opt[7]
    return mapping

def escape_right_arm():
    group = MoveGroupCommander('rarm')
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)
    
    # move to initial position
    name = group.get_active_joints()
    for joint in name:
        group.set_joint_value_target(joint, 0.0)
    group.set_joint_value_target('r_shoulder_r_joint', -np.pi / 3)
    group.go()

    # move to escape position
    group.set_joint_value_target('r_shoulder_r_joint', 0)
    group.go()


def move_initial_position(group, theta_opt):
    mapping = make_mapping(theta_opt)
    for joint in name_list:
        if joint in mapping:
            rospy.loginfo(f"joint = {joint}")
            group.set_joint_value_target(joint, mapping[joint][1])
    group.go()
    

def get_trajectory(theta_opt):
    mapping = make_mapping(theta_opt)
    trajectory = RobotTrajectory()
    trajectory.joint_trajectory.joint_names = name_list
    num_steps = len(theta_opt[0])  # 時間の分割数
    time_step = 0.2  #　各分割の時間
    for i in range(num_steps):
        point = JointTrajectoryPoint()

        # 各時間における関節角度を取得     
        joint_positions = []
        for joint in name_list:
            if joint in mapping:
                joint_positions.append(mapping[joint][i])  # mappingにデータがあればその値を追加
            else:
                joint_positions.append(0.0)  # mappingにデータがなければ0を追加

        # 関節角度を設定
        point.positions = joint_positions

        # 時間を設定
        point.time_from_start = rospy.Duration(time_step * (i + 1))

        # ポイントを追加
        trajectory.joint_trajectory.points.append(point)

    return trajectory

def main():
    group = MoveGroupCommander(move_group_name)
    group.set_max_velocity_scaling_factor(1.0)
    group.set_max_acceleration_scaling_factor(1.0)

    move_initial_position(group, theta_opt)
    
    rospy.loginfo('waiting service')
    rospy.wait_for_service('/seed_r7_ros_controller/hand_control')
    service = rospy.ServiceProxy('/seed_r7_ros_controller/hand_control', HandControl)

    service(1,'release',100)
    # wait for hand to release
    rospy.sleep(1)

    trajectory = get_trajectory(theta_opt)
    group.execute(trajectory, wait=True)

    service(1,'grasp',100)
    # wait for hand to grasp
    rospy.sleep(1)

    trajectory = get_trajectory(theta_opt_move_item)
    group.execute(trajectory, wait=True)
    rospy.sleep(1)

    # trajectory = get_trajectory(theta_opt_set_item)
    # group.execute(trajectory, wait=True)

    service(1,'release',100)
    # wait for hand to release
    rospy.sleep(1)

    # finish
    rospy.loginfo('finish')
    


if __name__ == '__main__':
    
    init_node()

    escape_right_arm()

    main()